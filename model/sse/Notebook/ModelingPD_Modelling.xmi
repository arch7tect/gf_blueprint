<?xml version="1.0" encoding="ASCII"?>
<sse:Notebook xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:sse="http://www.neoflex.ru/meta/sse" name="ModelingPD_Modelling" shortName="Modelling" description="The place where things happen">
  <auditInfo changeUser="orlov" changeDateTime="2019-07-12T11:14:24.179+0300" createUser="mtugushev" createDateTime="2019-05-13T18:36:59.727+0300"/>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-02-26T18:27:25.972" title="Libraries" textVisible="true" resultVisible="false" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="library(bit64)&#xA;library(RColorBrewer)&#xA;library(stringr)"/>
    <result xsi:type="sse:TextResult" data=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-11T11:44:24.149" textVisible="false" resultVisible="false" titleVisible="true">
    <body xsi:type="sse:LinkBody" paragraphName="FunctionLibraryA_2019-06-21T14:09:45.548"/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-02-18T14:06:28.701" title="Litter" textVisible="true" resultVisible="false" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="#sparkR.session.stop()&#xA;#sparkR.session(appNAme= &quot;PD&quot;, master = &quot;local&quot;, sparkConfig = list(spark.driver.memory = &quot;10g&quot;, spark.executor.memory = &quot;6g&quot;))&#xA;dtImpairmentRatingsMatrixRes &lt;- SparkR::sql(&quot;SELECT * FROM default.dtImpairmentRatingsMatrix&quot;)&#xA;dtImpairmentRatingsMatrix &lt;- data.table::setDT(SparkR::collect(dtImpairmentRatingsMatrixRes))&#xA;&#xA;str(dtImpairmentRatingsMatrix)"/>
    <result xsi:type="sse:TextResult" data="[1] &quot;Error in handleErrors(returnStatus, conn): No status is returned. Java SparkR backend might have failed.\n----LIVY_END_OF_ERROR----&quot;&#xA;Warning message:&#xA;In writeBin(requestMessage, conn) : problem writing to connection"/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-02-19T14:08:46.328" textVisible="true" resultVisible="true" titleVisible="true" status="ERROR">
    <body xsi:type="sse:CodeBody" interpreter="R" text="dtAccountInfoRes &lt;- SparkR::sql(&quot;SELECT * FROM modelingpd_bai.dtAccountInfo&quot;)&#xA;dtAccountInfo &lt;- data.table::setDT(SparkR::collect(dtAccountInfoRes))&#xA;str(dtAccountInfo)"/>
    <result xsi:type="sse:ErrorResult" ename="Error" evalue="[1] &quot;Error in handleErrors(returnStatus, conn): No status is returned. Java SparkR backend might have failed.&quot;" traceback=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-04T16:14:16.691" textVisible="true" resultVisible="true" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="dictEconomicSectorsRes &lt;- SparkR::sql(&quot;SELECT * FROM modelingpd_bai.dicteconomicsectors&quot;)&#xD;&#xA;dictEconomicSectors &lt;- data.table::setDT(SparkR::collect(dictEconomicSectorsRes))&#xD;&#xA;str(dictEconomicSectors)&#xD;&#xA;&#xD;&#xA;# join EconomicActivity to GE portfolio accounts:&#xD;&#xA;dtAccountInfo[dictEconomicSectors, economicactivity := str_squish(i.economicactivity), on = .(id_account = contractreference)]"/>
    <result xsi:type="sse:TextResult" data="Classes &#x2018;data.table&#x2019; and 'data.frame':&#x9;179 obs. of  8 variables:&#xA; $ id_customer      : int  2228234 11257786 21854661 1796457 27621657 33945609 4847616 11257931 24231794 4132536 ...&#xA; $ id_account       : num  1.22e+05 6.64e+04 3.17e+05 1.80e+11 7.53e+05 ...&#xA; $ economicactivity : chr  &quot;CONSTR&quot; &quot;IND EXTRACT&quot; &quot;COMER&quot; &quot;HOT TUR&quot; ...&#xA; $ nperiods         : int  104 46 104 12 59 61 104 104 98 58 ...&#xA; $ minstartdate     : chr  &quot;29.11.2007&quot; &quot;07.08.2007&quot; &quot;07.07.2009&quot; &quot;11.05.2017&quot; ...&#xA; $ minstartdate_year: int  2007 2007 2009 2017 2013 2013 2007 2007 2010 2013 ...&#xA; $ contractreference: num  1.22e+05 6.64e+04 3.17e+05 1.80e+11 7.53e+05 ...&#xA; $ cae              : int  45201 13203 51900 55113 36990 27320 93040 52530 64200 63040 ...&#xA; - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr> "/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-12T17:02:39.493" textVisible="true" resultVisible="true" titleVisible="true" status="ERROR">
    <body xsi:type="sse:CodeBody" interpreter="R" text="dtPDModelRes &lt;- SparkR::sql(&quot;SELECT * FROM modelingpd_bai.dtPDModel&quot;)&#xA;dtPDModel &lt;- data.table::setDT(SparkR::collect(dtPDModelRes))&#xA;str(dtPDModel)&#xA;"/>
    <result xsi:type="sse:ErrorResult" ename="Livy server error" evalue="" traceback="HTTP/1.1 500 Internal Server Error"/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-04T13:52:21.761" textVisible="true" resultVisible="true" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="# - DPD = 0            - stage 0                - Performance (1)&#xD;&#xA;# - DPD in (0,30)      - stage 1                - Performance (1)&#xD;&#xA;# - F_Default = 1 hist - stage 2                - Impairment (2)&#xD;&#xA;# - DPD in [30,60)     - stage 3                - Impairment (2)&#xD;&#xA;# - DPD in [60,90)     - stage 4                - Impairment (2)&#xD;&#xA;# - DPD > 90           - Default                - Default (3)&#xD;&#xA;# just assign the impairment stages:&#xD;&#xA;dtPDModel[N_DaysInArrears == 0, Rating := 0]&#xD;&#xA;#&#xD;&#xA;dtPDModel[N_DaysInArrears > 0 &amp; N_DaysInArrears &lt; 30 , Rating := 1]&#xD;&#xA;dtPDModel[N_DaysInArrears >= 30 &amp; N_DaysInArrears &lt; 60 , Rating := 3]&#xD;&#xA;dtPDModel[N_DaysInArrears >= 60 &amp; N_DaysInArrears &lt; 90 , Rating := 4]&#xD;&#xA;dtPDModel[N_DaysInArrears >= 90 | F_Default == 1, Rating := 9]&#xD;&#xA;# stage 2 downgrade ratings (1,0) if F_Default = 1 were observed at some period in the past:&#xD;&#xA;# use cummax to find F_Default from history&#xD;&#xA;dtPDModel[, F_Def_cummax := cummax(F_Default), by = ID_Account]&#xD;&#xA;dtPDModel[Rating %in% c(0,1) &amp; F_Def_cummax == 1, Rating := 2] "/>
    <result xsi:type="sse:TextResult" data="null device &#xA;          1 "/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-12T18:49:59.016" title="rename columns" textVisible="true" resultVisible="true" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="setnames(PaidAccountList, old = c(&quot;id_account&quot;,&quot;maxrefdate&quot;), &#xD;&#xA;                                  new = c(&quot;ID_Account&quot;,&quot;maxRefDate&quot;))&#xD;&#xA;setnames(dtForbearance, old = c(&quot;d_referencedate&quot;,&quot;id_customer&quot;, &quot;d_forbearancedate&quot;,&quot;id_originalaccount&quot;,&quot;id_workoutaccount&quot;,&quot;c_forbearancetype&quot;, &quot;n_forbearanceamount&quot;, &quot;refmonth&quot;), &#xD;&#xA;                        new = c(&quot;D_ReferenceDate&quot;,&quot;ID_Customer&quot;, &quot;D_ForbearanceDate&quot;,&quot;ID_OriginalAccount&quot;,&quot;ID_WorkoutAccount&quot;,&quot;C_ForbearanceType&quot;, &quot;N_ForbearanceAmount&quot;, &quot;refMonth&quot;))&#xD;&#xA;setnames(adWriteOffContracts, old = c(&quot;id_entity&quot;,&quot;id_account&quot;,&quot;id_accountmask&quot;,&quot;d_referencedate&quot;,&quot;id_customer&quot;,&quot;c_portfolio&quot;,&quot;c_producttype&quot;,&quot;c_productsubtype&quot;,&#xD;&#xA;                                    &quot;n_outstandingprincipalamount&quot;,&quot;n_accruedinterestamount&quot;,&quot;n_pastdueamount&quot;,&quot;n_writeoffamount&quot;,&quot;c_currency&quot;,&#xD;&#xA;                                    &quot;d_startdate&quot;,&quot;d_maturitydate&quot;,&quot;n_daysinarrears&quot;,&quot;auxfield3&quot;,&quot;auxfield4&quot;,&quot;auxfield50&quot;,&quot;auxfield52&quot;), &#xD;&#xA;                                  new = c(&quot;ID_Entity&quot;,&quot;ID_Account&quot;,&quot;ID_AccountMask&quot;,&quot;D_ReferenceDate&quot;,&quot;ID_Customer&quot;,&quot;C_Portfolio&quot;,&quot;C_ProductType&quot;,&quot;C_ProductSubType&quot;,&#xD;&#xA;                                    &quot;N_OutstandingPrincipalAmount&quot;,&quot;N_AccruedInterestAmount&quot;,&quot;N_PastDueAmount&quot;,&quot;N_WriteOffAmount&quot;,&quot;C_Currency&quot;,&#xD;&#xA;                                    &quot;D_StartDate&quot;,&quot;D_MaturityDate&quot;,&quot;N_DaysInArrears&quot;,&quot;AuxField3&quot;,&quot;AuxField4&quot;,&quot;AuxField50&quot;,&quot;AuxField52&quot;))&#xD;&#xA;setnames(dtAccountInfo, old = c(&quot;id_account&quot;,&quot;id_customer&quot;, &quot;c_portfolio&quot;,&quot;c_producttype&quot;,&quot;minstartdate&quot;,&quot;maxstartdate&quot;, &quot;minrefdate&quot;,&#xD;&#xA;                                &quot;maxrefdate&quot;, &quot;maxdaysinarrears&quot;, &quot;maxfdefault&quot;, &quot;maxfforbearance&quot;, &quot;economicactivity&quot;), &#xD;&#xA;                        new = c(&quot;ID_Account&quot;,&quot;ID_Customer&quot;, &quot;C_Portfolio&quot;,&quot;C_ProductType&quot;,&quot;minStartDate&quot;,&quot;maxStartDate&quot;, &quot;minRefDate&quot;,&#xD;&#xA;                                &quot;maxRefDate&quot;, &quot;maxDaysInArrears&quot;, &quot;maxFDefault&quot;, &quot;maxFForbearance&quot;, &quot;EconomicActivity&quot;))&#xD;&#xA;                                    "/>
    <result xsi:type="sse:TextResult" data=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-13T11:23:03.910" textVisible="true" resultVisible="true" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="str(PaidAccountList)&#xA;str(dtForbearance)&#xA;str(adWriteOffContracts)&#xA;str(dtAccountInfo)&#xA;"/>
    <result xsi:type="sse:TextResult" data="Classes &#x2018;data.table&#x2019; and 'data.frame':&#x9;131518 obs. of  4 variables:&#xA; $ ID_Account : num  9.66e+09 1.00e+10 1.00e+10 1.00e+10 1.00e+10 ...&#xA; $ maxRefDate : int  201107 201403 201707 201707 201103 201305 201204 201205 201506 201509 ...&#xA; $ nextRefDate: int  201103 201404 201708 201708 201104 201306 201110 201204 201412 201510 ...&#xA; $ RefMonth   : Date, format: &quot;2011-03-01&quot; &quot;2014-04-01&quot; ...&#xA; - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr> &#xA;Classes &#x2018;data.table&#x2019; and 'data.frame':&#x9;11482 obs. of  8 variables:&#xA; $ D_ReferenceDate    : int  201111 201205 201211 201302 201305 201307 201309 201310 201311 201312 ...&#xA; $ ID_Customer        : int  1660704 4506386 8817763 18933795 2844095 4630102 371540 8817763 16154602 15976120 ...&#xA; $ D_ForbearanceDate  : Date, format: &quot;2011-06-17&quot; &quot;2010-12-20&quot; ...&#xA; $ ID_OriginalAccount : num  1.66e+11 4.51e+11 8.82e+11 1.89e+12 2.84e+11 ...&#xA; $ ID_WorkoutAccount  : num  1.66e+11 4.51e+11 8.82e+11 1.89e+12 2.84e+11 ...&#xA; $ C_ForbearanceType  : chr  &quot;RCF-Redu&#x437;&#x433;o do cash flow&quot; &quot;DP-Desemprego&quot; &quot;RCF-Redu&#x437;&#x433;o do cash flow&quot; &quot;O-Outros&quot; ...&#xA; $ N_ForbearanceAmount: num  6.39e+05 1.89e+06 1.40e+07 5.48e+08 1.94e+05 ...&#xA; $ refMonth           : Date, format: &quot;2011-11-01&quot; &quot;2012-05-01&quot; ...&#xA; - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr> &#xA;Classes &#x2018;data.table&#x2019; and 'data.frame':&#x9;207872 obs. of  20 variables:&#xA; $ ID_Entity                   : chr  &quot;BAIAO&quot; &quot;BAIAO&quot; &quot;BAIAO&quot; &quot;BAIAO&quot; ...&#xA; $ ID_Account                  : num  1e+10 1e+10 1e+10 1e+10 1e+10 ...&#xA; $ ID_AccountMask              : num  1e+10 1e+10 1e+10 1e+10 1e+10 ...&#xA; $ D_ReferenceDate             : int  201309 201310 201311 201312 201401 201402 201403 201404 201405 201406 ...&#xA; $ ID_Customer                 : int  100068 100068 100068 100068 100068 100068 100068 100068 100068 100068 ...&#xA; $ C_Portfolio                 : chr  &quot;DE&quot; &quot;DE&quot; &quot;DE&quot; &quot;DE&quot; ...&#xA; $ C_ProductType               : chr  &quot;DO&quot; &quot;DO&quot; &quot;DO&quot; &quot;DO&quot; ...&#xA; $ C_ProductSubType            : chr  &quot;10_10P_AKZ&quot; &quot;10_10P_AKZ&quot; &quot;10_10P_AKZ&quot; &quot;10_10P_AKZ&quot; ...&#xA; $ N_OutstandingPrincipalAmount: num  0 0 0 0 0 0 0 0 0 0 ...&#xA; $ N_AccruedInterestAmount     : num  0 0 0 0 0 0 0 0 0 0 ...&#xA; $ N_PastDueAmount             : num  0 0 0 0 0 0 0 0 0 0 ...&#xA; $ N_WriteOffAmount            : num  1664031 1698017 1731580 1766946 1803035 ...&#xA; $ C_Currency                  : chr  &quot;AKZ&quot; &quot;AKZ&quot; &quot;AKZ&quot; &quot;AKZ&quot; ...&#xA; $ D_StartDate                 : chr  &quot;2008-04-16 00:00:00.000&quot; &quot;2008-04-16 00:00:00.000&quot; &quot;2008-04-15 00:00:00.000&quot; &quot;2008-04-15 00:00:00.000&quot; ...&#xA; $ D_MaturityDate              : chr  &quot;2014-09-30 00:00:00.000&quot; &quot;2014-10-31 00:00:00.000&quot; &quot;2014-11-30 00:00:00.000&quot; &quot;2014-12-31 00:00:00.000&quot; ...&#xA; $ N_DaysInArrears             : int  1993 2024 2055 2086 2118 2146 2175 2206 2237 2265 ...&#xA; $ AuxField3                   : chr  &quot;X&quot; &quot;X&quot; &quot;X&quot; &quot;X&quot; ...&#xA; $ AuxField4                   : chr  &quot;NULL&quot; &quot;NULL&quot; &quot;NULL&quot; &quot;NULL&quot; ...&#xA; $ AuxField50                  : num  1664031 1698017 1731580 1766946 1803035 ...&#xA; $ AuxField52                  : chr  &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; ...&#xA; - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr> &#xA;Classes &#x2018;data.table&#x2019; and 'data.frame':&#x9;174203 obs. of  12 variables:&#xA; $ id_account      : num  6622 31075 31307 32679 45703 ...&#xA; $ id_customer     : int  397744 414174 2501306 535992 6775088 927344 9576819 1438383 3773750 11257931 ...&#xA; $ c_portfolio     : chr  &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; ...&#xA; $ c_producttype   : chr  &quot;CARC&quot; &quot;CARC&quot; &quot;CARC&quot; &quot;CARC&quot; ...&#xA; $ minstartdate    : Date, format: &quot;2007-04-30&quot; &quot;2007-06-08&quot; ...&#xA; $ maxstartdate    : Date, format: &quot;2007-04-30&quot; &quot;2007-06-08&quot; ...&#xA; $ minrefdate      : int  201001 201001 201001 201001 201001 201001 201001 201001 201001 201001 ...&#xA; $ maxrefdate      : int  201808 201808 201808 201808 201808 201808 201808 201808 201808 201808 ...&#xA; $ maxdaysinarrears: int  0 0 0 0 183 216 960 21 0 0 ...&#xA; $ maxfdefault     : int  0 0 0 0 1 1 1 0 0 0 ...&#xA; $ maxfforbearance : int  0 0 0 0 0 0 0 0 0 0 ...&#xA; $ economicactivity: chr  NA NA NA NA ...&#xA; - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr> &#xA; - attr(*, &quot;index&quot;)= atomic  &#xA;  ..- attr(*, &quot;__maxfforbearance&quot;)= int  1 2 3 4 5 6 7 8 9 10 ..."/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-04T14:04:43.651" textVisible="true" resultVisible="true" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="&#xD;&#xA;lastRefDate &lt;- dtPDModel[, max(D_ReferenceDate)]&#xD;&#xA;# list of dates: D_ReferenceDate&#xD;&#xA;listRefDate &lt;- data.table(RefDate = dtPDModel[, unique(D_ReferenceDate)])[, nextRefDate:=shift(RefDate, 1, type = 'lead')]&#xD;&#xA;&#xD;&#xA;PaidAccountList &lt;- &#xD;&#xA;  dtAccountInfo[maxRefDate &lt; lastRefDate, .(ID_Account, maxRefDate)][&#xD;&#xA;    !dtForbearance, on = .(ID_Account = ID_OriginalAccount)][&#xD;&#xA;      !adWriteOffContracts, on = .(ID_Account = ID_Account)&#xD;&#xA;  ]&#xD;&#xA;PaidAccountList[listRefDate, nextRefDate := i.nextRefDate, on = .(maxRefDate = RefDate)]&#xD;&#xA;PaidAccountList[, RefMonth := ymd(nextRefDate * 100 + 1)]&#xD;&#xA;&#xD;&#xA;# insert rows in the dtImpairmentRatingsMatrix forming below:&#xD;&#xA;PaidAccountList[, .(ID_Account, RefMonth, Rating = -1)] # paid rating = -1"/>
    <result xsi:type="sse:TextResult" data="          ID_Account   RefMonth Rating&#xA;     1: 9.661915e+09 2011-03-01     -1&#xA;     2: 9.998000e+09 2014-04-01     -1&#xA;     3: 9.999001e+09 2017-08-01     -1&#xA;     4: 9.999001e+09 2017-08-01     -1&#xA;     5: 9.999005e+09 2011-04-01     -1&#xA;    ---                               &#xA;131514: 9.296873e+12 2018-04-01     -1&#xA;131515: 9.450335e+12 2018-04-01     -1&#xA;131516: 9.504523e+12 2018-08-01     -1&#xA;131517: 9.811136e+12 2018-05-01     -1&#xA;131518: 9.932165e+12 2017-06-01     -1"/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-02-20T10:53:23.456" title="" textVisible="true" resultVisible="false" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="dtForbearanceRes &lt;- SparkR::sql(&quot;SELECT * FROM modelingpd_bai.dtForbearance&quot;)&#xA;dtForbearance &lt;- data.table::setDT(SparkR::collect(dtForbearanceRes))&#xA;str(dtForbearance)&#xA;&#xA;adWriteOffContractsRes &lt;- SparkR::sql(&quot;SELECT * FROM modelingpd_bai.adWriteOffContracts&quot;)&#xA;adWriteOffContracts &lt;- data.table::setDT(SparkR::collect(adWriteOffContractsRes))&#xA;str(adWriteOffContracts)"/>
    <result xsi:type="sse:TextResult" data="Classes &#x2018;data.table&#x2019; and 'data.frame':&#x9;11482 obs. of  8 variables:&#xA; $ d_referencedate    : int  201111 201205 201211 201302 201305 201307 201309 201310 201311 201312 ...&#xA; $ id_customer        : int  1660704 4506386 8817763 18933795 2844095 4630102 371540 8817763 16154602 15976120 ...&#xA; $ d_forbearancedate  : Date, format: &quot;2011-06-17&quot; &quot;2010-12-20&quot; ...&#xA; $ id_originalaccount : num  1.66e+11 4.51e+11 8.82e+11 1.89e+12 2.84e+11 ...&#xA; $ id_workoutaccount  : num  1.66e+11 4.51e+11 8.82e+11 1.89e+12 2.84e+11 ...&#xA; $ c_forbearancetype  : chr  &quot;RCF-Redu&#x437;&#x433;o do cash flow&quot; &quot;DP-Desemprego&quot; &quot;RCF-Redu&#x437;&#x433;o do cash flow&quot; &quot;O-Outros&quot; ...&#xA; $ n_forbearanceamount: num  6.39e+05 1.89e+06 1.40e+07 5.48e+08 1.94e+05 ...&#xA; $ refmonth           : Date, format: &quot;2011-11-01&quot; &quot;2012-05-01&quot; ...&#xA; - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr> &#xA;Classes &#x2018;data.table&#x2019; and 'data.frame':&#x9;207872 obs. of  20 variables:&#xA; $ id_entity                   : chr  &quot;BAIAO&quot; &quot;BAIAO&quot; &quot;BAIAO&quot; &quot;BAIAO&quot; ...&#xA; $ id_account                  : num  1e+10 1e+10 1e+10 1e+10 1e+10 ...&#xA; $ id_accountmask              : num  1e+10 1e+10 1e+10 1e+10 1e+10 ...&#xA; $ d_referencedate             : int  201309 201310 201311 201312 201401 201402 201403 201404 201405 201406 ...&#xA; $ id_customer                 : int  100068 100068 100068 100068 100068 100068 100068 100068 100068 100068 ...&#xA; $ c_portfolio                 : chr  &quot;DE&quot; &quot;DE&quot; &quot;DE&quot; &quot;DE&quot; ...&#xA; $ c_producttype               : chr  &quot;DO&quot; &quot;DO&quot; &quot;DO&quot; &quot;DO&quot; ...&#xA; $ c_productsubtype            : chr  &quot;10_10P_AKZ&quot; &quot;10_10P_AKZ&quot; &quot;10_10P_AKZ&quot; &quot;10_10P_AKZ&quot; ...&#xA; $ n_outstandingprincipalamount: num  0 0 0 0 0 0 0 0 0 0 ...&#xA; $ n_accruedinterestamount     : num  0 0 0 0 0 0 0 0 0 0 ...&#xA; $ n_pastdueamount             : num  0 0 0 0 0 0 0 0 0 0 ...&#xA; $ n_writeoffamount            : num  1664031 1698017 1731580 1766946 1803035 ...&#xA; $ c_currency                  : chr  &quot;AKZ&quot; &quot;AKZ&quot; &quot;AKZ&quot; &quot;AKZ&quot; ...&#xA; $ d_startdate                 : chr  &quot;2008-04-16 00:00:00.000&quot; &quot;2008-04-16 00:00:00.000&quot; &quot;2008-04-15 00:00:00.000&quot; &quot;2008-04-15 00:00:00.000&quot; ...&#xA; $ d_maturitydate              : chr  &quot;2014-09-30 00:00:00.000&quot; &quot;2014-10-31 00:00:00.000&quot; &quot;2014-11-30 00:00:00.000&quot; &quot;2014-12-31 00:00:00.000&quot; ...&#xA; $ n_daysinarrears             : int  1993 2024 2055 2086 2118 2146 2175 2206 2237 2265 ...&#xA; $ auxfield3                   : chr  &quot;X&quot; &quot;X&quot; &quot;X&quot; &quot;X&quot; ...&#xA; $ auxfield4                   : chr  &quot;NULL&quot; &quot;NULL&quot; &quot;NULL&quot; &quot;NULL&quot; ...&#xA; $ auxfield50                  : num  1664031 1698017 1731580 1766946 1803035 ...&#xA; $ auxfield52                  : chr  &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; ...&#xA; - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr> &#xA;[1] &quot;/home/yarn&quot;&#xA;[1] &quot;/home/yarn/session.rda&quot;"/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-02-22T18:34:32.269" textVisible="true" resultVisible="true" titleVisible="true">
    <body xsi:type="sse:CodeBody" interpreter="R" text="dtAccountsRes &lt;- SparkR::sql(&quot;SELECT * FROM modelingpd_bai.dtAccounts&quot;)&#xA;dtAccounts &lt;- data.table::setDT(SparkR::collect(dtAccountsRes))&#xA;str(dtAccounts)"/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-04T14:19:56.580" textVisible="true" resultVisible="true" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="dtImpairmentRatingsMatrix &lt;- &#xD;&#xA;  rbindlist(list(&#xD;&#xA;    dtAccountInfo[maxFForbearance == 0][dtPDModel[, .(ID_Account, RefMonth, Rating)], on = .(ID_Account), nomatch = 0],&#xD;&#xA;    dtAccountInfo[maxFForbearance == 0][PaidAccountList[, .(ID_Account, RefMonth, Rating = -1)] , on = .(ID_Account), nomatch = 0]&#xD;&#xA;  ))&#xD;&#xA;&#xD;&#xA;# Split GE portfolio by Economic Activity&#xD;&#xA;# TODO: check automatically whether to add more: if so, print a warning;&#xD;&#xA;EconomicActivityList &lt;- c('COMER', 'SERV') #, 'IND TRANSF', 'CONSTR', 'IND EXTRACT')&#xD;&#xA;dtImpairmentRatingsMatrix[C_Portfolio == 'GE' &amp; EconomicActivity %in% EconomicActivityList, C_Portfolio := paste0(C_Portfolio,'.',EconomicActivity)]&#xD;&#xA;rm(EconomicActivityList)&#xD;&#xA;&#xD;&#xA;# TODO: temporal and dirty solution to eliminate duplicated rows by (ID_Account, minStartDate, RefMonth)&#xD;&#xA;suppressWarnings(&#xD;&#xA;  dtImpairmentRatingsMatrix &lt;- &#xD;&#xA;    dtImpairmentRatingsMatrix[,.(C_Portfolio = C_Portfolio[.N],&#xD;&#xA;                                 C_ProductType = C_ProductType[.N],&#xD;&#xA;                                 Rating = max(Rating, na.rm = T)), by=.(ID_Account, minStartDate, RefMonth)]&#xD;&#xA;)&#xD;&#xA;dtImpairmentRatingsMatrix[Rating == -Inf, Rating := NA]&#xD;&#xA;&#xD;&#xA;# get the Rating matrix (exclude 'CDI','GARP' products as they don't have DPD):&#xD;&#xA;ImpairmentRatingsMatrix &lt;- &#xD;&#xA;  data.table::dcast(data = dtImpairmentRatingsMatrix[!C_ProductType %in% c('CDI','GARP')],  # do we exclude products CDI, GARP ?&#xD;&#xA;                    ID_Account + minStartDate + C_Portfolio + C_ProductType ~ RefMonth, value.var = 'Rating')&#xD;&#xA;&#xD;&#xA;# TODO temp: drop DO product from the analysis /DO need additional data preparation/ :&#xD;&#xA;ImpairmentRatingsMatrix &lt;- ImpairmentRatingsMatrix[C_ProductType != 'DO']&#xD;&#xA;&#xD;&#xA;# rename columns for running the PD functions&#xD;&#xA;# ID_Account => loanid&#xD;&#xA;# C_Portfolio => SectorLabel&#xD;&#xA;# minStartDate => originDate&#xD;&#xA;# C_ProductType should be dropped (if not used for a protfolio definition)&#xD;&#xA;# TODO: rename SectorLabel to PortfolioLabel in the functions (as it makes more sense)&#xD;&#xA;# &#xD;&#xA;ImpairmentRatingsMatrix[, C_ProductType:=NULL]&#xD;&#xA;setnames(ImpairmentRatingsMatrix, old = c(&quot;ID_Account&quot;,&quot;C_Portfolio&quot;,&quot;minStartDate&quot;), &#xD;&#xA;                                  new = c(&quot;loanid&quot;,&quot;SectorLabel&quot;,&quot;originDate&quot;))&#xD;&#xA;&#xD;&#xA;"/>
    <result xsi:type="sse:TextResult" data=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-02-19T13:58:38.717" title="" textVisible="true" resultVisible="true" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="# get the Rating matrix (exclude 'CDI','GARP' products as they don't have DPD):&#xD;&#xA;ImpairmentRatingsMatrix &lt;- &#xD;&#xA;  data.table::dcast(data = dtImpairmentRatingsMatrix[!C_ProductType %in% c('CDI','GARP')],  # do we exclude products CDI, GARP ?&#xD;&#xA;                    ID_Account + minStartDate + C_Portfolio + C_ProductType ~ RefMonth, value.var = 'Rating')&#xD;&#xA;&#xD;&#xA;# TODO temp: drop DO product from the analysis /DO need additional data preparation/ :&#xD;&#xA;ImpairmentRatingsMatrix &lt;- ImpairmentRatingsMatrix[C_ProductType != 'DO']&#xD;&#xA;&#xD;&#xA;# rename columns for running the PD functions&#xD;&#xA;# ID_Account => loanid&#xD;&#xA;# C_Portfolio => SectorLabel&#xD;&#xA;# minStartDate => originDate&#xD;&#xA;# C_ProductType should be dropped (if not used for a protfolio definition)&#xD;&#xA;# TODO: rename SectorLabel to PortfolioLabel in the functions (as it makes more sense)&#xD;&#xA;# &#xD;&#xA;ImpairmentRatingsMatrix[, C_ProductType:=NULL]&#xD;&#xA;setnames(ImpairmentRatingsMatrix, old = c(&quot;ID_Account&quot;,&quot;C_Portfolio&quot;,&quot;minStartDate&quot;), &#xD;&#xA;                                  new = c(&quot;loanid&quot;,&quot;SectorLabel&quot;,&quot;originDate&quot;))"/>
    <result xsi:type="sse:TextResult" data=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-02-28T16:08:18.108" title="Calculate ODRs" textVisible="true" resultVisible="true" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="ODRthresholdDate = ymd('2007-01-01') # use the contracts originated later than this date for ODR calc.&#xD;&#xA;# Calculate ODRs for Sectors&#xD;&#xA;SectorList &lt;-   c(&quot;CC&quot;, &quot;CO&quot;,&quot;GE&quot;,&quot;GE.COMER&quot;,&quot;GE.SERV&quot;, &quot;HA&quot;, &quot;PE&quot;)&#xD;&#xA;ODRsSectors &lt;- list()&#xD;&#xA;SurvObjSectors &lt;- list()&#xD;&#xA;# TODO: start the Period col with 0 (no defaults in the 1st period)&#xD;&#xA;ImpairmentRatingsMatrix[,C_ProductType := NULL]&#xD;&#xA;# ---- I. Calculate ODRs and create Survival Objects for sectors ----&#xD;&#xA;for(s in SectorList) {&#xD;&#xA;  sPortfolio &lt;- prepPortfolioMatrix(ImpairmentRatingsMatrix, sector = s,&#xD;&#xA;                                    originDateThres = ODRthresholdDate, ReferenceDateRange = c(min = NA, max = NA))&#xD;&#xA;  sODRs &lt;- getSectorPortlolioODRs(sPortfolio, initStates = c(0:4), sector = s, # 0:4 # 0:1,3:4&#xD;&#xA;                                  universeThres = 5, visualize = F)&#xD;&#xA;  sSurv &lt;- getSurvObjectsPortfolio(sPortfolio, initStates = c(0:4), sector = s,   # 0:4 # 0:1,3:4&#xD;&#xA;                                   visualize = T)&#xD;&#xA;  # combine results in lists:&#xD;&#xA;  ODRsSectors &lt;- rbindlist(list(ODRsSectors, sODRs))&#xD;&#xA;  SurvObjSectors &lt;- append(SurvObjSectors, sSurv)&#xD;&#xA;}&#xD;&#xA;rm(sPortfolio, sODRs, sSurv)"/>
    <result xsi:type="sse:TextResult" data="Loading required package: survminer&#xA;Loading required package: ggpubr&#xA;Loading required package: magrittr&#xA;&#xA;Attaching package: &#x2018;magrittr&#x2019;&#xA;&#xA;The following object is masked from &#x2018;package:SparkR&#x2019;:&#xA;&#xA;    not&#xA;&#xA;&#xA;Attaching package: &#x2018;ggpubr&#x2019;&#xA;&#xA;The following object is masked from &#x2018;package:forecast&#x2019;:&#xA;&#xA;    gghistogram&#xA;&#xA;The following objects are masked from &#x2018;package:SparkR&#x2019;:&#xA;&#xA;    group_by, mutate&#xA;&#xA;Warning message:&#xA;In `[.data.table`(ImpairmentRatingsMatrix, , `:=`(C_ProductType,  :&#xA;  Adding new column 'C_ProductType' then assigning NULL (deleting it)."/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-02-28T16:10:12.990" title="fit W-P distribution" textVisible="true" resultVisible="false" titleVisible="true" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="# ---- II. fit W-P distribution ----&#xD;&#xA;# get W-P hazard by sector&#xD;&#xA;sectors &lt;- as.list(SectorList)&#xD;&#xA;sector_rateDict &lt;- ODRsSectors[sector %in% sectors, NA, by = .(sector, rateType)][, V1:=NULL][order(sector, rateType)]&#xD;&#xA;sector_peakPeriods &lt;- ODRsSectors[, .(peakPeriod = Period[which.max(PD)], peakODR = PD[which.max(PD)]), by = .(sector, rateType)]&#xD;&#xA;extraperiods = 200&#xD;&#xA;verbose = TRUE&#xD;&#xA;ODRsSectorsWP &lt;- &#xD;&#xA;  mapply(FUN = function(p_sector, p_rateType, maxLength = max(ODRsSectors$Period) + extraperiods){&#xD;&#xA;    SurvObjName &lt;- paste0(p_sector,'.',p_rateType)&#xD;&#xA;    if(verbose) cat('>>>>> Curve for',SurvObjName,'estimation::','\n')&#xD;&#xA;    &#xD;&#xA;    if(sector_peakPeriods[sector == p_sector &amp; rateType == p_rateType, peakPeriod] > 2){&#xD;&#xA;      # when the peak of ODR is in later periods, fit Weibull-Pareto hazard:&#xD;&#xA;      resSeries &lt;- WeibullParetoFit(SurvObject = SurvObjSectors[[SurvObjName]],&#xD;&#xA;                                    initialParams = c(5, 1, 2.5),&#xD;&#xA;                                    timeHorizon = seq(1,(max(ODRsSectors$Period) + extraperiods), by = 1),&#xD;&#xA;                                    verbose = verbose)&#xD;&#xA;    } else {&#xD;&#xA;      # when the peak of ODR is in the first period, fit just Pareto tail hazard:&#xD;&#xA;      if(verbose) cat('>>>>> Fit Pareto tail','\n')&#xD;&#xA;      resSeries &lt;- WeibullParetoFit(SurvObject = SurvObjSectors[[SurvObjName]],&#xD;&#xA;                                    initialParams = c(1, 2.5),&#xD;&#xA;                                    timeHorizon = seq(1,(max(ODRsSectors$Period) + extraperiods), by = 1),&#xD;&#xA;                                    dist = ParetoDist,&#xD;&#xA;                                    verbose = verbose)&#xD;&#xA;      &#xD;&#xA;      # TODO: shortcut - if the continuous hazard > 1, take max(ODR) since we have descrete hazard in monthly periods&#xD;&#xA;      if(resSeries[1] - sector_peakPeriods[sector == p_sector &amp; rateType == p_rateType, peakODR] > 0.1)&#xD;&#xA;        resSeries[1] &lt;- sector_peakPeriods[sector == p_sector &amp; rateType == p_rateType, peakODR]&#xD;&#xA;      &#xD;&#xA;      # TODO: shortcut - start the series with the 2nd period&#xD;&#xA;      resSeries &lt;- c(NA, resSeries[-length(resSeries)])&#xD;&#xA;    }&#xD;&#xA;    # stuff result with NAs for the max Period&#xD;&#xA;    if(length(resSeries) &lt; maxLength){&#xD;&#xA;      resSeries &lt;- c(resSeries, rep(NA, maxLength - length(resSeries)))&#xD;&#xA;    }&#xD;&#xA;    return(resSeries)&#xD;&#xA;  },&#xD;&#xA;  p_sector = sector_rateDict$sector,&#xD;&#xA;  p_rateType = sector_rateDict$rateType,&#xD;&#xA;  SIMPLIFY = T)&#xD;&#xA;colnames(ODRsSectorsWP) &lt;- paste0(sector_rateDict$sector,'.',sector_rateDict$rateType)&#xD;&#xA;ODRsSectorsWP &lt;- as.data.table(ODRsSectorsWP)&#xD;&#xA;ODRsSectorsWP[, ':='(periodNum = 1:.N, &#xD;&#xA;                     extraPeriods = c(rep(FALSE, .N - extraperiods), rep(TRUE, extraperiods)))]&#xD;&#xA;rm(sectors, sector_rateDict, sector_peakPeriods, verbose, extraperiods)"/>
    <result xsi:type="sse:TextResult" data=">>>>> Curve for CC.PD0_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 31475.214377 &#xA;iter   2 value 20640.331956&#xA;iter   3 value 19992.291162&#xA;iter   4 value 19628.360372&#xA;iter   5 value 10162.049829&#xA;iter   6 value 9226.832638&#xA;iter   7 value 9058.903181&#xA;iter   8 value 8173.296275&#xA;iter   9 value 8002.464900&#xA;iter  10 value 7938.888631&#xA;iter  11 value 7924.601650&#xA;iter  12 value 7924.295352&#xA;iter  13 value 7924.257083&#xA;iter  14 value 7924.111561&#xA;iter  15 value 7924.103269&#xA;iter  15 value 7924.103196&#xA;final  value 7924.103196 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est      L95%     U95%     se     &#xA;t0    60.6275       NA       NA       NA&#xA;beta   0.0726       NA       NA       NA&#xA;k      1.0002       NA       NA       NA&#xA;&#xA;N = 9998,  Events: 1095,  Censored: 8903&#xA;Total time at risk: 621754&#xA;Log-likelihood = -7924.103, df = 3&#xA;AIC = 15854.21&#xA;&#xA;>>>>> Curve for CC.PD1_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 4560.503577 &#xA;iter   2 value 3996.748737&#xA;iter   3 value 3058.342849&#xA;iter   4 value 3022.122065&#xA;iter   5 value 2794.270349&#xA;iter   6 value 1997.116293&#xA;iter   7 value 1957.653780&#xA;iter   8 value 1915.073848&#xA;iter   9 value 1864.726965&#xA;iter  10 value 1862.234866&#xA;iter  11 value 1860.026966&#xA;iter  12 value 1849.371460&#xA;iter  13 value 1837.184099&#xA;iter  14 value 1832.302233&#xA;iter  15 value 1832.212381&#xA;iter  16 value 1832.103132&#xA;iter  17 value 1832.070086&#xA;iter  18 value 1832.021100&#xA;iter  19 value 1831.981569&#xA;iter  20 value 1831.979456&#xA;iter  20 value 1831.979435&#xA;iter  20 value 1831.979435&#xA;final  value 1831.979435 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est      L95%     U95%     se     &#xA;t0    4.15053  3.90487  4.41166  0.12920&#xA;beta  0.08738  0.07797  0.09792  0.00508&#xA;k     6.09376  4.66158  8.08612       NA&#xA;&#xA;N = 1415,  Events: 313,  Censored: 1102&#xA;Total time at risk: 71244&#xA;Log-likelihood = -1831.979, df = 3&#xA;AIC = 3669.959&#xA;&#xA;>>>>> Curve for CC.PD2_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 3107.472512 &#xA;iter   2 value 2299.915304&#xA;iter   3 value 1924.005975&#xA;iter   4 value 1906.002249&#xA;iter   5 value 1713.969772&#xA;iter   6 value 1606.179552&#xA;iter   7 value 1476.760868&#xA;iter   8 value 1443.231133&#xA;iter   9 value 1438.012290&#xA;iter  10 value 1436.956662&#xA;iter  11 value 1434.471539&#xA;iter  12 value 1432.039583&#xA;iter  13 value 1431.924937&#xA;iter  14 value 1431.759323&#xA;iter  15 value 1431.752152&#xA;iter  15 value 1431.752139&#xA;final  value 1431.752139 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est       L95%      U95%      se      &#xA;t0     4.14717   3.91548   4.39256   0.12164&#xA;beta   0.11685   0.10325   0.13224   0.00738&#xA;k      8.81563   6.25551  12.62287        NA&#xA;&#xA;N = 1057,  Events: 263,  Censored: 794&#xA;Total time at risk: 39296&#xA;Log-likelihood = -1431.752, df = 3&#xA;AIC = 2869.504&#xA;&#xA;>>>>> Curve for CC.PD3_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 4251.179009 &#xA;iter   2 value 3668.318734&#xA;iter   3 value 3629.701882&#xA;iter   4 value 3620.425370&#xA;iter   5 value 3282.620629&#xA;iter   6 value 3259.830054&#xA;iter   7 value 3248.166203&#xA;iter   8 value 3239.232884&#xA;iter   9 value 3236.630064&#xA;iter  10 value 3236.106193&#xA;iter  11 value 3234.970961&#xA;iter  12 value 3234.353794&#xA;iter  13 value 3234.295595&#xA;iter  13 value 3234.295557&#xA;iter  13 value 3234.295557&#xA;final  value 3234.295557 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est     L95%    U95%    se    &#xA;t0    3.0248  2.9880  3.0621  0.0189&#xA;beta  0.3245  0.3028  0.3478  0.0115&#xA;k     8.1166  7.0326  9.3955      NA&#xA;&#xA;N = 1491,  Events: 847,  Censored: 644&#xA;Total time at risk: 44102&#xA;Log-likelihood = -3234.296, df = 3&#xA;AIC = 6474.591&#xA;&#xA;>>>>> Curve for CC.PD4_9 estimation:: &#xA;>>>>> Fit Pareto tail &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 3157.868491 &#xA;iter   2 value 3008.211368&#xA;iter   3 value 2415.079526&#xA;iter   4 value 2326.335839&#xA;iter   5 value 2272.572497&#xA;iter   6 value 2267.227503&#xA;iter   7 value 2267.097801&#xA;iter   8 value 2267.071066&#xA;iter   9 value 2267.065409&#xA;iter  10 value 2267.035275&#xA;iter  11 value 2267.018684&#xA;iter  12 value 2267.017796&#xA;iter  13 value 2267.017345&#xA;iter  14 value 2267.016664&#xA;iter  15 value 2267.014846&#xA;iter  16 value 2267.011802&#xA;iter  17 value 2267.010337&#xA;iter  18 value 2267.009989&#xA;iter  19 value 2267.009871&#xA;iter  20 value 2267.008876&#xA;iter  21 value 2267.007507&#xA;iter  22 value 2267.006807&#xA;iter  23 value 2267.006646&#xA;iter  24 value 2267.006596&#xA;iter  25 value 2267.006117&#xA;iter  26 value 2267.005412&#xA;iter  27 value 2267.005015&#xA;iter  28 value 2267.004924&#xA;iter  28 value 2267.004899&#xA;iter  28 value 2267.004880&#xA;final  value 2267.004880 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est       L95%      U95%      se      &#xA;beta  5.27e-01  4.93e-01  5.64e-01  1.79e-02&#xA;k     2.13e+05  1.00e+00  9.14e+17        NA&#xA;&#xA;N = 1066,  Events: 866,  Censored: 200&#xA;Total time at risk: 15044&#xA;Log-likelihood = -2267.005, df = 2&#xA;AIC = 4538.01&#xA;&#xA;>>>>> Curve for CO.PD0_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 126390.284879 &#xA;iter   2 value 32320.944817&#xA;iter   3 value 32227.724841&#xA;iter   4 value 28829.734061&#xA;iter   5 value 27617.221287&#xA;iter   6 value 27435.346366&#xA;iter   7 value 27303.836059&#xA;iter   8 value 27246.803618&#xA;iter   9 value 27240.224336&#xA;iter  10 value 27207.833511&#xA;iter  11 value 27176.009345&#xA;iter  12 value 27165.509382&#xA;iter  13 value 27148.010518&#xA;iter  14 value 27125.756205&#xA;iter  15 value 27027.988041&#xA;iter  16 value 26953.456920&#xA;iter  17 value 26829.002951&#xA;iter  18 value 26622.136442&#xA;iter  19 value 26596.518501&#xA;iter  20 value 26558.166292&#xA;iter  21 value 26545.909380&#xA;iter  22 value 26540.579476&#xA;iter  23 value 26538.337540&#xA;iter  24 value 26538.077864&#xA;iter  25 value 26537.781389&#xA;iter  26 value 26537.678090&#xA;iter  27 value 26537.416611&#xA;iter  28 value 26537.411541&#xA;iter  28 value 26537.411472&#xA;iter  28 value 26537.411472&#xA;final  value 26537.411472 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est     L95%    U95%    se    &#xA;t0    8.3690  7.9290  8.8333  0.2306&#xA;beta  0.0600  0.0577  0.0624  0.0012&#xA;k     4.7230  4.3234  5.1708      NA&#xA;&#xA;N = 72891,  Events: 4057,  Censored: 68834&#xA;Total time at risk: 1292317&#xA;Log-likelihood = -26537.41, df = 3&#xA;AIC = 53080.82&#xA;&#xA;>>>>> Curve for CO.PD1_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 35158.779260 &#xA;iter   2 value 15320.791600&#xA;iter   3 value 13251.069383&#xA;iter   4 value 13117.790140&#xA;iter   5 value 13084.765247&#xA;iter   6 value 12959.436682&#xA;iter   7 value 12918.448017&#xA;iter   8 value 12857.115767&#xA;iter   9 value 12825.180705&#xA;iter  10 value 12773.669603&#xA;iter  11 value 12662.329738&#xA;iter  12 value 12658.066537&#xA;iter  13 value 12656.092499&#xA;iter  14 value 12655.749493&#xA;iter  15 value 12655.230297&#xA;iter  16 value 12655.213930&#xA;iter  17 value 12655.079069&#xA;iter  18 value 12655.077233&#xA;iter  18 value 12655.077231&#xA;iter  18 value 12655.077231&#xA;final  value 12655.077231 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est      L95%     U95%     se     &#xA;t0    4.05981  4.01293  4.10723  0.02406&#xA;beta  0.08937  0.08562  0.09328  0.00195&#xA;k     8.15865  7.57077  8.79913       NA&#xA;&#xA;N = 25575,  Events: 2280,  Censored: 23295&#xA;Total time at risk: 303009&#xA;Log-likelihood = -12655.08, df = 3&#xA;AIC = 25316.15&#xA;&#xA;>>>>> Curve for CO.PD2_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 1507.602620 &#xA;iter   2 value 1271.597331&#xA;iter   3 value 1241.453615&#xA;iter   4 value 1217.185199&#xA;iter   5 value 1216.377613&#xA;iter   6 value 1157.373038&#xA;iter   7 value 1148.579458&#xA;iter   8 value 1145.321270&#xA;iter   9 value 1142.547549&#xA;iter  10 value 1140.196142&#xA;iter  11 value 1139.259022&#xA;iter  12 value 1136.383055&#xA;iter  13 value 1136.352866&#xA;iter  14 value 1136.342187&#xA;iter  15 value 1136.342015&#xA;iter  15 value 1136.342015&#xA;final  value 1136.342015 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est     L95%    U95%    se    &#xA;t0    5.0272  4.7961  5.2694  0.1207&#xA;beta  0.5021  0.4430  0.5692  0.0321&#xA;k     7.2651  6.0893  8.7125      NA&#xA;&#xA;N = 991,  Events: 292,  Censored: 699&#xA;Total time at risk: 8391&#xA;Log-likelihood = -1136.342, df = 3&#xA;AIC = 2278.684&#xA;&#xA;>>>>> Curve for CO.PD3_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 17757.804260 &#xA;iter   2 value 16411.102140&#xA;iter   3 value 15436.504234&#xA;iter   4 value 15292.708358&#xA;iter   5 value 15119.167596&#xA;iter   6 value 14427.231558&#xA;iter   7 value 14216.499724&#xA;iter   8 value 13773.929489&#xA;iter   9 value 13536.911809&#xA;iter  10 value 13459.735105&#xA;iter  11 value 13456.003878&#xA;iter  12 value 13449.957811&#xA;iter  13 value 13449.370728&#xA;iter  14 value 13449.197171&#xA;iter  15 value 13449.179779&#xA;iter  16 value 13449.165770&#xA;iter  17 value 13449.102292&#xA;iter  17 value 13449.102231&#xA;iter  17 value 13449.102226&#xA;final  value 13449.102226 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est       L95%      U95%      se      &#xA;t0     3.00232   2.99957   3.00508   0.00141&#xA;beta   0.49246   0.47766   0.50771   0.00766&#xA;k     48.79620  43.87957  54.27658        NA&#xA;&#xA;N = 11760,  Events: 4219,  Censored: 7541&#xA;Total time at risk: 94876&#xA;Log-likelihood = -13449.1, df = 3&#xA;AIC = 26904.2&#xA;&#xA;>>>>> Curve for CO.PD4_9 estimation:: &#xA;>>>>> Fit Pareto tail &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 13294.204611 &#xA;iter   2 value 12438.184711&#xA;iter   3 value 10049.108476&#xA;iter   4 value 9588.121170&#xA;iter   5 value 9499.574084&#xA;iter   6 value 9495.024267&#xA;iter   7 value 9494.873960&#xA;iter   8 value 9489.901086&#xA;iter   9 value 9489.840153&#xA;iter  10 value 9489.839230&#xA;iter  11 value 9489.826908&#xA;iter  12 value 9489.825916&#xA;iter  13 value 9489.825454&#xA;iter  14 value 9489.825060&#xA;iter  15 value 9489.823523&#xA;iter  16 value 9489.821130&#xA;iter  17 value 9489.819975&#xA;iter  18 value 9489.819622&#xA;iter  18 value 9489.819516&#xA;iter  18 value 9489.819501&#xA;final  value 9489.819501 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est       L95%      U95%      se      &#xA;beta  7.67e-01  7.45e-01  7.90e-01  1.15e-02&#xA;k     8.35e+05  1.00e+00  6.73e+14        NA&#xA;&#xA;N = 5788,  Events: 4480,  Censored: 1308&#xA;Total time at risk: 22003&#xA;Log-likelihood = -9489.82, df = 2&#xA;AIC = 18983.64&#xA;&#xA;>>>>> Curve for GE.PD0_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 3302.015676 &#xA;iter   2 value 2492.718894&#xA;iter   3 value 2057.493026&#xA;iter   4 value 1957.390535&#xA;iter   5 value 1949.854227&#xA;iter   6 value 1733.661891&#xA;iter   7 value 1437.031834&#xA;iter   8 value 1433.859639&#xA;iter   9 value 1433.419845&#xA;iter  10 value 1432.440336&#xA;iter  11 value 1431.024185&#xA;iter  12 value 1429.207184&#xA;iter  13 value 1429.057566&#xA;iter  14 value 1428.936631&#xA;iter  15 value 1428.935612&#xA;iter  15 value 1428.935605&#xA;final  value 1428.935605 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est       L95%      U95%      se      &#xA;t0     5.06341   4.92571   5.20496   0.07123&#xA;beta   0.12782   0.11263   0.14506   0.00825&#xA;k     16.63013  11.37830  24.53960        NA&#xA;&#xA;N = 1364,  Events: 248,  Censored: 1116&#xA;Total time at risk: 41716&#xA;Log-likelihood = -1428.936, df = 3&#xA;AIC = 2863.871&#xA;&#xA;>>>>> Curve for GE.PD1_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 897.749388 &#xA;iter   2 value 752.352499&#xA;iter   3 value 722.032954&#xA;iter   4 value 720.529420&#xA;iter   5 value 700.383613&#xA;iter   6 value 696.654229&#xA;iter   7 value 692.802342&#xA;iter   8 value 691.299151&#xA;iter   9 value 687.122519&#xA;iter  10 value 686.342250&#xA;iter  11 value 686.338922&#xA;iter  12 value 685.360206&#xA;iter  13 value 684.907187&#xA;iter  14 value 684.786310&#xA;iter  15 value 684.766942&#xA;iter  16 value 684.766894&#xA;iter  16 value 684.766886&#xA;iter  17 value 684.766873&#xA;iter  17 value 684.766867&#xA;iter  17 value 684.766867&#xA;final  value 684.766867 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est      L95%     U95%     se     &#xA;t0     4.0320   3.9349   4.1315   0.0501&#xA;beta   0.3793   0.3250   0.4426   0.0299&#xA;k      9.7813   7.3668  13.1114       NA&#xA;&#xA;N = 414,  Events: 173,  Censored: 241&#xA;Total time at risk: 6236&#xA;Log-likelihood = -684.7669, df = 3&#xA;AIC = 1375.534&#xA;&#xA;>>>>> Curve for GE.PD2_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 285.067966 &#xA;iter   2 value 203.098204&#xA;iter   3 value 194.331179&#xA;iter   4 value 187.627804&#xA;iter   5 value 185.770262&#xA;iter   6 value 183.837318&#xA;iter   7 value 182.398551&#xA;iter   8 value 181.892581&#xA;iter   9 value 181.660304&#xA;iter  10 value 181.149798&#xA;iter  11 value 180.864447&#xA;iter  12 value 179.177976&#xA;iter  13 value 178.954851&#xA;iter  14 value 177.886735&#xA;iter  15 value 177.493163&#xA;iter  16 value 177.433059&#xA;iter  17 value 177.314419&#xA;iter  18 value 176.952792&#xA;iter  19 value 176.811927&#xA;iter  20 value 176.550383&#xA;iter  21 value 176.536784&#xA;iter  22 value 176.422127&#xA;iter  23 value 176.408979&#xA;iter  24 value 176.408561&#xA;iter  24 value 176.408561&#xA;iter  24 value 176.408561&#xA;final  value 176.408561 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est      L95%     U95%     se     &#xA;t0      3.999       NA       NA       NA&#xA;beta    0.261       NA       NA       NA&#xA;k     658.553       NA       NA       NA&#xA;&#xA;N = 146,  Events: 39,  Censored: 107&#xA;Total time at risk: 2654&#xA;Log-likelihood = -176.4086, df = 3&#xA;AIC = 358.8171&#xA;&#xA;>>>>> Curve for GE.PD3_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 783.241244 &#xA;iter   2 value 777.613511&#xA;iter   3 value 768.590925&#xA;iter   4 value 749.021603&#xA;iter   5 value 683.436040&#xA;iter   6 value 676.757800&#xA;iter   7 value 674.378391&#xA;iter   8 value 670.131346&#xA;iter   9 value 668.429403&#xA;iter  10 value 668.384197&#xA;iter  11 value 668.070541&#xA;iter  12 value 667.081102&#xA;iter  13 value 666.498258&#xA;iter  14 value 666.325602&#xA;iter  15 value 666.317808&#xA;iter  16 value 666.317791&#xA;iter  17 value 666.317771&#xA;iter  17 value 666.317761&#xA;iter  17 value 666.317755&#xA;final  value 666.317755 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est      L95%     U95%     se     &#xA;t0     3.0182   2.9848   3.0519   0.0171&#xA;beta   0.8260   0.7252   0.9409   0.0549&#xA;k     15.2848  11.7901  19.9115       NA&#xA;&#xA;N = 385,  Events: 243,  Censored: 142&#xA;Total time at risk: 3643&#xA;Log-likelihood = -666.3178, df = 3&#xA;AIC = 1338.636&#xA;&#xA;>>>>> Curve for GE.PD4_9 estimation:: &#xA;>>>>> Fit Pareto tail &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 755.247262 &#xA;iter   2 value 663.699815&#xA;iter   3 value 586.420667&#xA;iter   4 value 561.019855&#xA;iter   5 value 551.370737&#xA;iter   6 value 547.798387&#xA;iter   7 value 547.699546&#xA;iter   8 value 544.882080&#xA;iter   9 value 544.545220&#xA;iter  10 value 544.432122&#xA;iter  11 value 544.311655&#xA;iter  12 value 544.311561&#xA;iter  13 value 544.288872&#xA;iter  14 value 544.261262&#xA;iter  15 value 544.227273&#xA;iter  16 value 544.199135&#xA;iter  17 value 544.198214&#xA;iter  18 value 544.197173&#xA;iter  19 value 544.196311&#xA;iter  20 value 544.193164&#xA;iter  21 value 544.188772&#xA;iter  22 value 544.187371&#xA;iter  23 value 544.186452&#xA;iter  24 value 544.186296&#xA;iter  25 value 544.184238&#xA;iter  26 value 544.181995&#xA;iter  27 value 544.181336&#xA;iter  28 value 544.180928&#xA;iter  29 value 544.180886&#xA;iter  30 value 544.179860&#xA;iter  31 value 544.178748&#xA;iter  32 value 544.178400&#xA;iter  33 value 544.178195&#xA;iter  34 value 544.178182&#xA;iter  35 value 544.177703&#xA;iter  36 value 544.177152&#xA;iter  37 value 544.176963&#xA;iter  38 value 544.176852&#xA;iter  38 value 544.176847&#xA;iter  38 value 544.176846&#xA;final  value 544.176846 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est       L95%      U95%      se      &#xA;beta  7.28e-01  6.44e-01  8.24e-01  4.60e-02&#xA;k     1.82e+05  1.00e+00  3.85e+23        NA&#xA;&#xA;N = 314,  Events: 251,  Censored: 63&#xA;Total time at risk: 1648&#xA;Log-likelihood = -544.1768, df = 2&#xA;AIC = 1092.354&#xA;&#xA;>>>>> Curve for GE.COMER.PD0_9 estimation:: &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 145.613737 &#xA;iter   2 value 34.488937&#xA;iter   3 value 34.338143&#xA;iter   4 value 29.256991&#xA;iter   5 value 29.153106&#xA;iter   6 value 28.352452&#xA;iter   7 value 28.151791&#xA;iter   8 value 27.775086&#xA;iter   9 value 27.712578&#xA;iter  10 value 27.628031&#xA;iter  11 value 27.615307&#xA;iter  12 value 27.602540&#xA;iter  13 value 27.589728&#xA;iter  14 value 27.579671&#xA;iter  15 value 27.506893&#xA;iter  16 value 27.482807&#xA;iter  17 value 27.473515&#xA;iter  18 value 27.424112&#xA;iter  19 value 27.408493&#xA;iter  20 value 27.407567&#xA;iter  20 value 27.407567&#xA;iter  20 value 27.407567&#xA;final  value 27.407567 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est       L95%      U95%      se      &#xA;t0    2.40e+01  2.36e+01  2.44e+01  2.10e-01&#xA;beta  9.39e-02  3.51e-02  2.51e-01  4.71e-02&#xA;k     3.32e+02  1.00e+00  1.14e+12        NA&#xA;&#xA;N = 42,  Events: 4,  Censored: 38&#xA;Total time at risk: 3086&#xA;Log-likelihood = -27.40757, df = 3&#xA;AIC = 60.81513&#xA;&#xA;>>>>> Curve for GE.COMER.PD1_9 estimation:: &#xA;>>>>> Fit Pareto tail &#xA;Forming integrated rmst function...&#xA;Forming integrated mean function...&#xA;initial  value 18.044682 &#xA;iter   2 value 10.276155&#xA;iter   3 value 10.163632&#xA;iter   4 value 9.990554&#xA;iter   5 value 9.930761&#xA;iter   6 value 9.901288&#xA;iter   7 value 9.889382&#xA;iter   8 value 9.870121&#xA;iter   9 value 9.798924&#xA;iter  10 value 9.784388&#xA;iter  11 value 9.774506&#xA;iter  12 value 9.774437&#xA;iter  13 value 9.774312&#xA;iter  14 value 9.769661&#xA;iter  15 value 9.768054&#xA;iter  16 value 9.767011&#xA;iter  17 value 9.767010&#xA;iter  18 value 9.767009&#xA;iter  19 value 9.767006&#xA;iter  20 value 9.766997&#xA;iter  21 value 9.766976&#xA;iter  22 value 9.766976&#xA;iter  23 value 9.766959&#xA;iter  24 value 9.766958&#xA;iter  25 value 9.766917&#xA;iter  26 value 9.766857&#xA;iter  27 value 9.766856&#xA;iter  28 value 9.766814&#xA;iter  29 value 9.766813&#xA;iter  30 value 9.766763&#xA;iter  31 value 9.766695&#xA;iter  32 value 9.766667&#xA;iter  33 value 9.766650&#xA;iter  34 value 9.766650&#xA;iter  35 value 9.766624&#xA;iter  36 value 9.766587&#xA;iter  37 value 9.766586&#xA;iter  38 value 9.766560&#xA;iter  39 value 9.766560&#xA;iter  40 value 9.766343&#xA;iter  41 value 9.766233&#xA;iter  41 value 9.766233&#xA;final  value 9.766233 &#xA;converged&#xA;Call:&#xA;flexsurvreg(formula = SurvObject ~ 1, dist = dist, inits = initialParams, &#xA;    method = methodOpt, control = list(trace = 2, REPORT = ifelse(verbose, &#xA;        1, 0)))&#xA;&#xA;Estimates: &#xA;      est       L95%      U95%      se      &#xA;beta  1.79e-01  4.48e-02  7.14e-01  1.26e-01&#xA;k     9.38e+03  1.00e+00  2.15e+78        NA&#xA;&#xA;N = 4,  Events: 2,  Censored: 2&#xA;Total time at risk: 106&#xA;Log-likelihood = -9.766233, df = 2&#xA;AIC = 23.53247&#xA;&#xA;>>>>> Curve for GE.COMER.PD2_9 estimation:: &#xA;[1] &quot;Error in if (sector_peakPeriods[sector == p_sector &amp; rateType == p_rateType, : argument is of length zero\n----LIVY_END_OF_ERROR----&quot;&#xA;Warning messages:&#xA;1: In flexsurvreg(SurvObject ~ 1, inits = initialParams, dist = dist,  :&#xA;  Optimisation has probably not converged to the maximum likelihood - Hessian is not positive definite. &#xA;2: In flexsurvreg(SurvObject ~ 1, inits = initialParams, dist = dist,  :&#xA;  Optimisation has probably not converged to the maximum likelihood - Hessian is not positive definite. "/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-02-20T18:52:46.296" title="Plot the fitted Conditional PD" textVisible="false" resultVisible="true" titleVisible="true" outputHeight="494px" paragraphWidth="12" status="ERROR">
    <body xsi:type="sse:CodeBody" interpreter="R" text="&#xD;&#xA;# ---- III. ### Plot the fitted Conditional PD ----&#xD;&#xA;# TODO: plot in loop each sector at a time&#xD;&#xA;# for(s in SectorList) {&#xD;&#xA;  nSectors &lt;- length(SectorList)&#xD;&#xA;  nRateTypes &lt;- 5&#xD;&#xA;  colorRates &lt;- RColorBrewer::brewer.pal(nRateTypes, 'Dark2')&#xD;&#xA;  print(ggplot(rbindlist(&#xD;&#xA;    list(melt(ODRsSectorsWP, id.vars = c('periodNum','extraPeriods'))[, type := 'fit'], &#xD;&#xA;         ODRsSectors[, .(periodNum = Period, extraperiods = FALSE, &#xD;&#xA;                         variable = paste0(sector,'.',rateType),&#xD;&#xA;                         value = PD, &#xD;&#xA;                         type = 'ODR')]))) +  &#xD;&#xA;    geom_line(aes(x = periodNum, y = value, color = interaction(variable, type), linetype = extraPeriods)) +&#xD;&#xA;    scale_color_manual(values = c(rep(colorRates, nSectors), rep('grey37', nRateTypes * nSectors))) + &#xD;&#xA;    facet_wrap(~variable, scales = &quot;free&quot;, ncol = ifelse(nRateTypes > 5, 5, nRateTypes) ) + &#xD;&#xA;    xlab('Period') + ylab('Conditional PD') +&#xD;&#xA;    theme(legend.position=&quot;none&quot;))&#xD;&#xA;  rm(nSectors)&#xD;&#xA;# }&#xD;&#xA;&#xD;&#xA;# TODO: change in ODRsSectors and in  ODRsSectorsWP in the process of generation &#xD;&#xA;ODRsSectorsWP[, periodNum := 0:(.N-1)]  &#xD;&#xA;"/>
    <result xsi:type="sse:ErrorResult" ename="Error" evalue="[1] &quot;Error in eval(parse(text = \&quot;png(\\\&quot;/hadoop/yarn/local/usercache/livy/appcache/application_1553097464244_0021/container_e73_1553097464244_0021_01_000001/tmp/2863746556117888730.png\\\&quot;)\\n\\n# ---- III. ### Plot the fitted Conditional PD ----\\n# TODO: plot in loop each sector at a time\\n# for(s in SectorList) {\\n  nSectors &lt;- length(SectorList)\\n  nRateTypes &lt;- 5\\n  colorRates &lt;- RColorBrewer::brewer.pal(nRateTypes, 'Dark2')\\n  print(ggplot(rbindlist(\\n    list(melt(ODRsSectorsWP, id.vars = c('periodNum','extraPeriods'))[, type := 'fit'], \\n         ODRsSectors[, .(periodNum = Period, extraperiods = FALSE, \\n                         variable = paste0(sector,'.',rateType),\\n                         value = PD, \\n                         type = 'ODR')]))) +  \\n    geom_line(aes(x = periodNum, y = value, color = interaction(variable, type), linetype = extraPeriods)) +\\n    scale_color_manual(values = c(rep(colorRates, nSectors), rep('grey37', nRateTypes * nSectors))) + \\n    facet_wrap(~variable, scales = \\\&quot;free\\\&quot;, ncol = ifelse(nRateTypes > 5, 5, nRateTypes) ) + \\n    xlab('Period') + ylab('Conditional PD') +\\n    theme(legend.position=\\\&quot;none\\\&quot;))\\n  rm(nSectors)\\n# }\\n\\n# TODO: change in ODRsSectors and in  ODRsSectorsWP in the process of generation \\nODRsSectorsWP[, periodNum := 0:(.N-1)]  \\n\\ndev.off()\&quot;)): object 'SectorList' not found&quot;" traceback=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-18T16:19:18.459" textVisible="false" resultVisible="true" titleVisible="false" outputHeight="500px" paragraphWidth="12" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="SectorList &lt;-   c(&quot;CC&quot;)&#xD;&#xA;# ---- IV.  Plot Cumulative PDFs ----------------------&#xD;&#xA;CumulativePDs &lt;- as.data.table(sapply(ODRsSectorsWP[,!c(&quot;periodNum&quot;,&quot;extraPeriods&quot;)],&#xD;&#xA;                                        FUN = getCumulativePD))&#xD;&#xA;CumulativePDs[, periodNum := ODRsSectorsWP$periodNum]&#xD;&#xA;plotCumulativePD(sectors = SectorList, &#xD;&#xA;                 rateTypes = c('PD0_9','PD1_9','PD2_9','PD3_9','PD4_9'),&#xD;&#xA;                 data = CumulativePDs[0:120])"/>
    <result xsi:type="sse:ImageResult" mimeType="image/png" base64data=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-18T16:19:57.059" textVisible="false" resultVisible="true" titleVisible="false" outputHeight="500px" paragraphWidth="12" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="SectorList &lt;-   c(&quot;CO&quot;)&#xD;&#xA;# ---- IV.  Plot Cumulative PDFs ----------------------&#xD;&#xA;CumulativePDs &lt;- as.data.table(sapply(ODRsSectorsWP[,!c(&quot;periodNum&quot;,&quot;extraPeriods&quot;)],&#xD;&#xA;                                        FUN = getCumulativePD))&#xD;&#xA;CumulativePDs[, periodNum := ODRsSectorsWP$periodNum]&#xD;&#xA;plotCumulativePD(sectors = SectorList, &#xD;&#xA;                 rateTypes = c('PD0_9','PD1_9','PD2_9','PD3_9','PD4_9'),&#xD;&#xA;                 data = CumulativePDs[0:120])"/>
    <result xsi:type="sse:ImageResult" mimeType="image/png" base64data=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-18T16:21:06.141" textVisible="false" resultVisible="true" titleVisible="false" paragraphWidth="12" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="SectorList &lt;-   c(&quot;GE&quot;)&#xD;&#xA;# ---- IV.  Plot Cumulative PDFs ----------------------&#xD;&#xA;CumulativePDs &lt;- as.data.table(sapply(ODRsSectorsWP[,!c(&quot;periodNum&quot;,&quot;extraPeriods&quot;)],&#xD;&#xA;                                        FUN = getCumulativePD))&#xD;&#xA;CumulativePDs[, periodNum := ODRsSectorsWP$periodNum]&#xD;&#xA;plotCumulativePD(sectors = SectorList, &#xD;&#xA;                 rateTypes = c('PD0_9','PD1_9','PD2_9','PD3_9','PD4_9'),&#xD;&#xA;                 data = CumulativePDs[0:120])"/>
    <result xsi:type="sse:ImageResult" mimeType="image/png" base64data=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-18T16:21:08.392" textVisible="false" resultVisible="true" titleVisible="false" outputHeight="500px" paragraphWidth="12" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="SectorList &lt;-   c(&quot;GE.COMER&quot;)&#xD;&#xA;# ---- IV.  Plot Cumulative PDFs ----------------------&#xD;&#xA;CumulativePDs &lt;- as.data.table(sapply(ODRsSectorsWP[,!c(&quot;periodNum&quot;,&quot;extraPeriods&quot;)],&#xD;&#xA;                                        FUN = getCumulativePD))&#xD;&#xA;CumulativePDs[, periodNum := ODRsSectorsWP$periodNum]&#xD;&#xA;plotCumulativePD(sectors = SectorList, &#xD;&#xA;                 rateTypes = c('PD0_9','PD1_9','PD2_9','PD3_9','PD4_9'),&#xD;&#xA;                 data = CumulativePDs[0:120])"/>
    <result xsi:type="sse:ImageResult" mimeType="image/png" base64data=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-18T16:23:04.208" textVisible="false" resultVisible="true" titleVisible="false" paragraphWidth="12" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="SectorList &lt;-   c(&quot;GE.SERV&quot;)&#xD;&#xA;# ---- IV.  Plot Cumulative PDFs ----------------------&#xD;&#xA;CumulativePDs &lt;- as.data.table(sapply(ODRsSectorsWP[,!c(&quot;periodNum&quot;,&quot;extraPeriods&quot;)],&#xD;&#xA;                                        FUN = getCumulativePD))&#xD;&#xA;CumulativePDs[, periodNum := ODRsSectorsWP$periodNum]&#xD;&#xA;plotCumulativePD(sectors = SectorList, &#xD;&#xA;                 rateTypes = c('PD0_9','PD1_9','PD2_9','PD3_9','PD4_9'),&#xD;&#xA;                 data = CumulativePDs[0:120])"/>
    <result xsi:type="sse:ImageResult" mimeType="image/png" base64data=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-18T16:23:11.417" textVisible="false" resultVisible="true" titleVisible="false" outputHeight="500px" paragraphWidth="12" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="SectorList &lt;-   c(&quot;HA&quot;)&#xD;&#xA;# ---- IV.  Plot Cumulative PDFs ----------------------&#xD;&#xA;CumulativePDs &lt;- as.data.table(sapply(ODRsSectorsWP[,!c(&quot;periodNum&quot;,&quot;extraPeriods&quot;)],&#xD;&#xA;                                        FUN = getCumulativePD))&#xD;&#xA;CumulativePDs[, periodNum := ODRsSectorsWP$periodNum]&#xD;&#xA;plotCumulativePD(sectors = SectorList, &#xD;&#xA;                 rateTypes = c('PD0_9','PD1_9','PD2_9','PD3_9','PD4_9'),&#xD;&#xA;                 data = CumulativePDs[0:120])"/>
    <result xsi:type="sse:ImageResult" mimeType="image/png" base64data=""/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-03-18T16:24:51.625" textVisible="false" resultVisible="true" titleVisible="false" outputHeight="500px" paragraphWidth="12" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="SectorList &lt;-   c(&quot;PE&quot;)&#xD;&#xA;# ---- IV.  Plot Cumulative PDFs ----------------------&#xD;&#xA;CumulativePDs &lt;- as.data.table(sapply(ODRsSectorsWP[,!c(&quot;periodNum&quot;,&quot;extraPeriods&quot;)],&#xD;&#xA;                                        FUN = getCumulativePD))&#xD;&#xA;CumulativePDs[, periodNum := ODRsSectorsWP$periodNum]&#xD;&#xA;plotCumulativePD(sectors = SectorList, &#xD;&#xA;                 rateTypes = c('PD0_9','PD1_9','PD2_9','PD3_9','PD4_9'),&#xD;&#xA;                 data = CumulativePDs[0:120])"/>
    <result xsi:type="sse:ImageResult" mimeType="image/png" base64data="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vyKdATKCjVKuxzsiyemwdevW66+//qmnnlq1apUQ4s0339y0adO2bdtyMbZUYsBS75RpdtmfY3fooPejfe03blxgS7fuPK2mQPeNr/+fSyfNuGv+pxRJ/pUA5DkhxGi7+Ho8nvyP6eSAXrduXWVl5fbt2/fv3885nz9//tNPP33FFVfkYmzJuDDiS72JU2q7URHqzmaJw+sN/+mV42uvnVVcPNJJdacCXTft+eUXZyzZOHOFpWMDgAkgzf9fX3755a+++mr2hzIsIUT/JafBU+dBiyxeQUcjxm9ePrxyVfXIp22c9Hu/seeXN85duXHWyrHtqAIAHysyrVjjgpPoD+jUHVWy2Wv0z388UVbmWnFx9Qiff9zXufHNF2+cuey2hVdYOS4AmDhkCmghDKW/m12aHVWyVoPe/2H76VO9n7u6doQlrNOBrpve+uXXZq34Su0yi4cGABOHTFMIOIn4LA5miNSG/SLYzQosv4Lu7tJ2vXrq2uvnjLAX0rlQ7y17XrrhgiUbapdaPTYAGIPMNuwnosbGxmXLlvn9/qQDTeiG/SJhqbfBKeXqlQe8rMDadd6GwXf+38PLVlSdd37xSJ7fHvZ//c0X106fv3H2KksHBgDjkamG/b/61a9CodD3v//9QCCQ+trMNOzPTwO62RkizU1C62vQf3+9yWZTVl1aM5In90bDm956+VNVszbNvdTSUQEAEf1877/5tPZhn6Yy+8YV/yPpwUw17Ceie++99957792xY0fqoTPTsD8/8YQaNOPJJQ5h6CLca2kNurUl8MH7rV/duFBJ24p6II3r337nN3NKJt9x4RXWDQkA4pbUXKlF01y3JonHSKJMNex/8cUX6+rq5s9P35ZytA37ZQpoYjRUw/5wD1NszFlo0cENQ/xh57HLP3VeadnwK0oNwe9+73cFNvv2RZ/FahSA7KibdFkOj2427H/llVd+8pOfmM2LUltImw37a2trd+zY0draOux7yhTQiTVoYYiklYQ84CV3adrNbDLi9b+e9hTaF180ZSRPfvjAa52R4LMXf8mmpPldDQD5b2wN+6dPn/78888TEWMs9fmZadifnxJLHKkLVSwtQJ876/9wb9t/+8YnRpL/Pzv+3u6Woz9b/S/oswEghcw27E98PPMN+/NWYj9oljIPmge6LJrCwbn48ysnLr18eskIdrHa1XLkfx95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"/>
  </paragraphs>
  <paragraphs name="ModelingPD_BAI_Modelling_2019-02-27T17:37:13.739" title="EXPORT" textVisible="true" resultVisible="true" titleVisible="true" outputHeight="87px" status="SUCCESS">
    <body xsi:type="sse:CodeBody" interpreter="R" text="# ---- IV.  Export Curves to FR ----------------------&#xD;&#xA;# export Marginal PD curves:&#xD;&#xA;&#xD;&#xA;# shortcut with GE.names:&#xD;&#xA;setnames(ODRsSectorsWP, old = c(&quot;GE.COMER.PD0_9&quot;,&quot;GE.COMER.PD1_9&quot;,&quot;GE.COMER.PD2_9&quot;,&quot;GE.COMER.PD3_9&quot;,&quot;GE.COMER.PD4_9&quot;,&quot;GE.SERV.PD0_9&quot;,&quot;GE.SERV.PD1_9&quot;,&quot;GE.SERV.PD2_9&quot;,&quot;GE.SERV.PD3_9&quot;,  &quot;GE.SERV.PD4_9&quot;), &#xD;&#xA;         new  = c(&quot;GE_COMER.PD0_9&quot;,&quot;GE_COMER.PD1_9&quot;,&quot;GE_COMER.PD2_9&quot;,&quot;GE_COMER.PD3_9&quot;,&quot;GE_COMER.PD4_9&quot;,&quot;GE_SERV.PD0_9&quot;,&quot;GE_SERV.PD1_9&quot;,&quot;GE_SERV.PD2_9&quot;,&quot;GE_SERV.PD3_9&quot;,  &quot;GE_SERV.PD4_9&quot;))&#xD;&#xA;&#xD;&#xA;# TODO: update the exportCumulativePDs to export with signif // so not use scientific format:&#xD;&#xA;exportCumulativePDs(data = round(ODRsSectorsWP[periodNum > 0, -c('extraPeriods')], digits = 12), fileName = 'ExportMarginalPDs.PD_Curves', &#xD;&#xA;                    CreditRiskScenario = 'BAI_Marginal', writeToHadoop = TRUE, hadoopPath=&quot;/tmp/&quot;)&#xD;&#xA;# name back&#xD;&#xA;setnames(ODRsSectorsWP, old =  c(&quot;GE_COMER.PD0_9&quot;,&quot;GE_COMER.PD1_9&quot;,&quot;GE_COMER.PD2_9&quot;,&quot;GE_COMER.PD3_9&quot;,&quot;GE_COMER.PD4_9&quot;,&quot;GE_SERV.PD0_9&quot;,&quot;GE_SERV.PD1_9&quot;,&quot;GE_SERV.PD2_9&quot;,&quot;GE_SERV.PD3_9&quot;,  &quot;GE_SERV.PD4_9&quot;), &#xD;&#xA;         new  = c(&quot;GE.COMER.PD0_9&quot;,&quot;GE.COMER.PD1_9&quot;,&quot;GE.COMER.PD2_9&quot;,&quot;GE.COMER.PD3_9&quot;,&quot;GE.COMER.PD4_9&quot;,&quot;GE.SERV.PD0_9&quot;,&quot;GE.SERV.PD1_9&quot;,&quot;GE.SERV.PD2_9&quot;,&quot;GE.SERV.PD3_9&quot;,  &quot;GE.SERV.PD4_9&quot;))"/>
    <result xsi:type="sse:TextResult" data="SLF4J: Class path contains multiple SLF4J bindings.&#xA;SLF4J: Found binding in [jar:file:/usr/hdp/2.6.5.0-292/hadoop/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]&#xA;SLF4J: Found binding in [jar:file:/usr/hdp/current/livy2-server/rsc-jars/phoenix-client.jar!/org/slf4j/impl/StaticLoggerBinder.class]&#xA;SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.&#xA;SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]"/>
  </paragraphs>
</sse:Notebook>
