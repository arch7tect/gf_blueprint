<?xml version="1.0" encoding="ASCII"?>
<sse:ModelNotebook xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:sse="http://www.neoflex.ru/meta/sse" name="ScoringModel_ExecutableModel_DataTransform" shortName="ExecutableModel_DataTransform">
  <auditInfo changeUser="orlov" changeDateTime="2019-07-12T11:14:21.720+0300" createUser="psimanihin" createDateTime="2019-06-17T18:08:27.037+0300"/>
  <paragraphs name="PipelineModelDataTransform_2019-06-17T18:31:22.275" title="Prepare Input Data" textVisible="true" resultVisible="true" titleVisible="true">
    <body xsi:type="sse:CodeBody" interpreter="R" text="# input - a data set for transformation&#xA;# output - the resulted data set&#xA;&#xA;# Define input --------&#xA;# input &lt;- test"/>
  </paragraphs>
  <paragraphs name="ScoringModel_ExecutableModel_DataTransform_2019-06-18T12:41:53.738" title="1. Transformations" textVisible="true" resultVisible="true" titleVisible="true">
    <body xsi:type="sse:CodeBody" interpreter="R" text="# 2. Transformations ----------&#xA;# Contunuous&#xA;input[, PERSONAL_NET_INCOME_log := log10(PERSONAL_NET_INCOME)]&#xA;input[is.infinite(PERSONAL_NET_INCOME_log), PERSONAL_NET_INCOME_log := NA]&#xA;&#xA;input[, MATE_INCOME_log := log(MATE_INCOME)]&#xA;input[is.infinite(MATE_INCOME_log), MATE_INCOME_log := NA]&#xA;&#xA;# to factors (check the levels)&#xA;# input[, isMATE_INCOME := factor(MATE_INCOME> 0)]&#xA;&#xA;for(xFeature in xCat) {&#xA;  input[, (xFeature) := factor(get(xFeature))]&#xA;  print(paste('------',xFeature,'------'))&#xA;  print(input[, .N, by = (values = get(xFeature))])&#xA;}&#xA;&#xA;# Feature Engineering -------------&#xA;# Personal reference&#xA;# input[, .N, by = PERSONAL_REFERENCE_1][N>10][order(-N)]&#xA;# input[, .N, by = PERSONAL_REFERENCE_2][N>10][order(-N)]&#xA;"/>
  </paragraphs>
  <paragraphs name="ScoringModel_ExecutableModel_DataTransform_2019-06-18T12:33:07.849" title="2. Outliers" textVisible="true" resultVisible="true" titleVisible="true">
    <body xsi:type="sse:CodeBody" interpreter="R" text="# 3. Outliers ---------&#xA;# 3.1 Numerical:&#xA;print(smbinning.eda(input[,.SD, .SDcols = xNum], pbar = 0)$eda)&#xA;&#xA;# impute:&#xA;ggplot(input[PERSONAL_NET_INCOME_log &lt; OutliersThresMax[&quot;PERSONAL_NET_INCOME_log&quot;]]) + &#xA;  geom_histogram(aes(x = PERSONAL_NET_INCOME), bins = 30) + scale_x_continuous(trans = &quot;log10&quot;)&#xA;&#xA;input[PERSONAL_NET_INCOME_log > OutliersThresMax[&quot;PERSONAL_NET_INCOME_log&quot;],  PERSONAL_NET_INCOME_log := OutliersMean[&quot;PERSONAL_NET_INCOME_log&quot;]]&#xA;&#xA;# 3.2 Categorical:&#xA;# impute:&#xA;for(xOutName in xCatOutliers){&#xA;  if(is.na(xCatLevels[xOutName])){&#xA;    input[is.na(get(xOutName)), (xOutName) := xCatSubstitute[xOutName]]  &#xA;  } else {&#xA;    input[get(xOutName) == xCatLevels[xOutName], (xOutName) := xCatSubstitute[xOutName]]&#xA;  }&#xA;  input[, (xOutName) := factor(get(xOutName))]&#xA;}&#xA;&#xA;"/>
  </paragraphs>
  <paragraphs name="ScoringModel_ExecutableModel_DataTransform_2019-06-18T12:34:14.855" title="3. Generate WoE" textVisible="true" resultVisible="true" titleVisible="true">
    <body xsi:type="sse:CodeBody" interpreter="R" text="# 5. Generate WoE --------&#xA;baseNames &lt;- c(&quot;ID_CLIENT&quot;, &quot;TARGET_LABEL&quot;, xNum, xCat)&#xA;inputOut &lt;- input[,.SD, .SDcols = baseNames]&#xA;&#xA;# Numerical&#xA;for(xName in names(xNumBins)){&#xA;  xNameBin &lt;-  paste0(&quot;B_&quot;, xName)&#xA;  inputOut[, (xNameBin) := smbinning.gen(input, ivout = xNumBins[[xName]], chrname = xNameBin)[, get(xNameBin)] ]&#xA;  inputOut[, (paste0(&quot;WoE_&quot;, xName)) := xNumBins[[xName]]$ivtable[, &quot;WoE&quot;][ get(xNameBin)] ]&#xA;}&#xA;&#xA;#Categorical&#xA;for(xName in names(xCatBins)){&#xA;  xNameBin &lt;-  paste0(&quot;B_&quot;, xName)&#xA;  inputOut[, (xNameBin) := smbinning.factor.gen(input, ivout = xCatBins[[xName]], chrname = xNameBin)[, get(xNameBin)] ]&#xA;  inputOut[, (paste0(&quot;WoE_&quot;, xName)) := xCatBins[[xName]]$ivtable[, &quot;WoE&quot;][ get(xNameBin)] ]&#xA;}&#xA;&#xA;str(inputOut)"/>
  </paragraphs>
  <paragraphs name="ScoringModel_ExecutableModel_DataTransform_2019-06-18T12:34:30.981" title="4. Additional Transformations" textVisible="true" resultVisible="true" titleVisible="true">
    <body xsi:type="sse:CodeBody" interpreter="R" text="# 6. Factor levels update: --------&#xA;&#xA;# remove \' from factor levels:&#xA;for(xFactor in names(inputOut)){&#xA;  if(is.factor(inputOut[, get(xFactor)])) {&#xA;    xlvl &lt;- levels(inputOut[, get(xFactor)])&#xA;    levels(inputOut[[xFactor]]) &lt;- gsub('\'','', x = xlvl)&#xA;    # factor(x, labels = gsub('\'','', x = xlvl))&#xA;  }&#xA;}"/>
  </paragraphs>
  <paragraphs name="ScoringModel_ExecutableModel_DataTransform_2019-06-18T12:35:08.675" title="Prepare Output Data" textVisible="true" resultVisible="true" titleVisible="true">
    <body xsi:type="sse:CodeBody" interpreter="R" text="# Output: --------&#xA;Output &lt;- inputOut&#xA;rm(inputOut)&#xA;&#xA;str(Output)"/>
  </paragraphs>
</sse:ModelNotebook>
